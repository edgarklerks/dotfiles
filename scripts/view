#!/bin/zsh

typeset -A exthook
typeset -A guesshook
MAXSIZE=100000
if [[ -z $GUESSER_LEVEL  ]]; then
    export GUESSER_LEVEL=0
fi
# Hook on the mimetype reported by file (rather accurate)
guesshook[application/gzip]='gziphook'
guesshook[application/x-xz]='xzhook'
guesshook[application/x-bzip2]='bzip2hook'
guesshook[text/plain]='texthook'
guesshook[inode/x-empty]='emptyhook'
guesshook[inode/symlink]='linkhook'
guesshook[text/x-shellscript]='shellhook'
guesshook[text/x-tex]='texhook'
guesshook[text/x-c]='chook'
guesshook[text/x-python]='pyhook'

# Hook on the extension, be sure to catch errors (except for source files)
exthook[hs]='hshook'
exthook[py]='pyhook'

zmodload zsh/pcre
autoload -U colors
colors

function ok_message(){
 msg="$1"
 echo "${fg_bold[cyan]}$msg${reset_color}\n"

}
function error_detected(){
    fn="$1"
    msg="$2"
    echo "${fg_bold[red]}Error viewing $fn: $msg${reset_color}\n"
    exit 1
}
function emptyhook(){
    error_detected "$1" "file is empty."
}

function get_ext(){
    fn=$(basename "$1")
    echo ${fn#*.}
}

function is_link(){
    fn="$1"
    readlink "$fn" > /dev/null
    return $?
}


function linkhook(){
    fn="$1"
    rf=$(readlink "$fn")
    dn=$(dirname "$fn")
    ok_message "$fn is a symbolic link to another $dn/$rf.\nredirecting.."
    view "$dn/$rf"
}

# things get in here if file doesn't know about them, so we add
# another filtering layer based on file extension
function texthook(){
    fn="$1"
    mime="$2"
    ok_message "$fn: plain text file detected\ntry another round of matchers based on file extension"
    ext=$(get_ext "$fn")
    if [[ -z "${exthook[$ext]}" ]]; then
	ok_message "Defaulting to text viewer"
	less "$1"
	return 0
   fi

    "${exthook[$ext]}" "$fn" "$mime"
}
function bzip2hook(){
    fn="$1"
    mime="$2"
    ok_message "$fn: bzip2 file detected.\nopening.."
    count=$(bzcat "$fn" | head -n$MAXSIZE | wc -c)
    if (( count > MAXSIZE )); then
		error_detected "$fn" "File too big, won't open it";
    fi

    tf=$(mktemp)
    bzcat "$fn" > "$tf"
    view "$tf"
}
function hshook(){
    sourcehook "haskell" "$1"
}
function pyhook(){
    sourcehook "python" "$1"
}
function shellhook(){
    sourcehook "bash" "$1"
}
function chook(){
    sourcehook "c" "$1"
}
function texhook(){
    sourcehook "tex" "$1"
}

function sourcehook(){
    type="$1"
    fn="$2"
    ok_message "$fn: $1 script detected\nopening.."
    pygmentize -f terminal256 -P"style=murphy" -O"bg=dark" -Fcodetagify -l$type "$fn"| less -r
}


function xzhook(){
    fn="$1"
    mime="$2"
    ok_message "$fn: xz file detected.\nopening.."
    count=$(xz --list "$fn" | head -n$MAXSIZE | wc -l)
    if (( count > 2 )); then
	error_detected "$fn" "I cannot open this file, there are multiple files in it."
    fi
    xz --list "$fn" | tail -n1 | awk '{print $6}' | while read unit; do
	  if [[ "$unit" != "B" ]]; then
		error_detected "$fn" "File too big, won't open it";
	   fi
    done
    xz --list "$fn" | tail -n1 | awk '{print $5}' | while read size; do
	xz --list "$fn" | tail -n1 | awk '{print $6}' | while read unit; do
	    case "$unit" in
		B)
		;;
		MiB)
		    (( size = size * 1000 ))
		    ;;
		*)
		    error_detected "$fn" "File too big, won't open it";
		    ;;
		esac


	    if (( size > MAXSIZE )); then
		error_detected "$fn" "File too big, won't open it";
	    fi
	    done
    done
    tf=$(mktemp)
    xzcat "$fn" > "$tf"
    view "$tf"
}

function gziphook(){
    fn="$1"
    mime="$2"
    ok_message "$fn: gzip file detected.\nopening.."
    count=$(gzip --list "$fn" | head -n$MAXSIZE | wc -l)
    if (( count > 2 )); then
	error_detected "$fn" "I cannot open this file, there are multiple files in it."
    fi
    gzip --list "$fn" | tail -n1 | awk '{print $2}' | while read size; do

	if (( size > MAXSIZE )); then
	    error_detected("File too big, won't open it");
	fi

    done
    tf=$(mktemp)
    zcat "$fn" > "$tf"
    view "$tf"
}


function defaulthook(){
    fn="$1"
    mime="$2"
    error_detected "$fn" "cannot determine suitable viewer.\nMime type $mime unknown.";
}

function guess_type(){
    fn="$1"
    fs=$(du "$fn" | awk '{print $1}')
    if (( fs == 0 )); then
	if [[ $(is_link "$fn") ]]; then
	    error_detected "$fn" "file is empty"
	fi
    fi
    (( GUESSER_LEVEL = GUESSER_LEVEL + 1 ))
    if (( GUESSER_LEVEL > 0 )); then
	ok_message "Content is wrapped in $GUESSER_LEVEL layers"
    fi
    file --mime-type -k -b "$fn" | while read mime; do
		guesser="${guesshook[$mime]-defaulthook}"
		$guesser "$fn" "$mime"
    done
    (( GUESSER_LEVEL = GUESSER_LEVEL - 1 ))
}

guess_type "$1"
