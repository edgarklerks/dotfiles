#!/usr/bin/zsh
# A module with added git scripts in it.
# git br simplifies management of remote branches
# git signed simplifies management of signed actions
cmd_list=(git_br git_signed git_tree git_rmerge)
autoload -Uz colors
colors
autoload -Uz messages
messages

function git_current_branch(){
    git branch | grep "^\*" | awk '{print $2}'
}

git_gen_help=$(cat <<EOF
Symbols used:
name is a literal token
[] means optional
<> is a user defined descriptive name
| alternative

Examples:
[name] means a literal and optional token
<name> means filled in by the user with meaning name
[<name>] means a name optionally provided in by the user
[test|<stage>] mean optionally filled with the literal token test or a stage name provided by the user

git-extras v1.0
EOF
)
git_rmerge_help=$(cat <<EOF
Description:
git rmerge does a recursive merge with the patience diff algorithm.

Synopsis:

git rmerge <branch> -- merge the current branch with <branch>

Example:

git rmerge master -- merge master into your current branch

EOF
)

git_signed_help=$(cat <<EOF
Description:
git signed transforms common actions into a signed variant. It simplifies the process of
signing git actions.


Synopsis:

LHS is the matching rule, where RHS is the transformed command.

git signed commit <normal commit options> -> git commit -S <normal commit options>
git signed tag <tagname> <normal tag options> -> git tag <tagname> -a -s <normal tag options>; git push --tags

Examples:

git signed tag lol-1.0 -m "prut" -> git tag lol-1.0 -s -a -m "prut"
EOF
)
git_br_help=$(cat <<EOF
Description:

git br creates a branch and setup it remotely. At the end it will push the branch to
the server.
It does some sanity checks, like does the branch already exists.

Synopsis:

git br add - adds a branch to remote optionally with name [<remotename>]
git br del - deletes a branch, when [remote] is set including remote branch
git br remote <branchname> -- set the origin of the branch
git br mergedel <branchname> <parent-branchname> -- merges the branchname in parent-branchname and then closes it and push it.
git br mergeback <parentname> -- rebases  the current branch on parent and the merges parent into the current branch
git br mergeto <parentname> -- rebase the current branch on parent and merge the changes into parent
git sync <branchname> -- Syncs current branch with <branchname>
git tree -- shows a nice tree

Examples:

git br add test -- create an local branch test with remote origin test
git br del lol remote -- remove lol locally and remote
git br remote test -- couple test to the remote branch test
git br mergedel pipo master -- merge pip into master
git br mergeback master -- merge changes back into master
git br mergeto master -- rebase the current branch on master and merge the changes into master
git tree -- show a nice tree

EOF
)

function _git_error_msg(){
  func="$1"
  msg="$2"
  echo "${fg_bold[red]}$msg${reset_color}"
  echo "${fg_bold[cyan]}"
  eval "echo \"\${${func}_help}\""
  echo "--------------------------------------------------------------------------"
  echo "$git_gen_help"
  echo "${reset_color}"
}

function git_br_sync(){
    branchname="$1"
    currentbranch=$(git_current_branch)
    othername="${2-$currentbranch}"
    if [[ -z "$othername" ]]; then
	(
	failure "We are not in a git repository"
	)
	return 1;
    fi
    ok "Syncing $othername with $branchname"
    (
	git pull -a || failure "Couldn't pull branches"
	git checkout "$othername" || failure "Couldn't checkout $othername"
	git rebase -m -X patience "$othername" || failure "Couldn't rebase with $othername"
    ) && ok "Syncing $currentbranch with $othername"
}
function git_br_add(){
    branchname="$1"
    currentbranch="$(git_current_branch)"
    ok "Setting up local branch $branchname with remote origin/$branchname"
    (
            command git branch "$branchname" "$currentbranch" || failure "Cannot create branch $branchname"
            command git push -u origin "$branchname" || failure "Cannot push $branchname to origin"
            command git checkout "$branchname" || failure "Cannot switch to branch $branchname"
    ) && ok "Switched to $branchname"

}
function git_br_remote(){
    branchname="$1"
    ok "Setting remote of $branchname to origin/$branchname"
    command git push -u origin "$branchname"
}
function git_br_mergedel(){
        branchname="$1"
        parentname="$2"
        (
	    ok "Merging $branchname into $parentname"
            command git checkout "$parentname" || failure "Couldn't checkout $parentname"
            git merge "$branchname"  || failure "Problems merging $branchname"
            git_br_del "$branchname" remote  || failure "Couldn't delete branch $branchname"
	) && ok "merged and deleted branch $branchname"
}

function git_br_mergeback(){
        parentname="$1"
	currentbranch="$(git_current_branch)"
	ok "Rebasing $currentbranch with $parentname"
	(
	    git rebase "$parentname" || failure "Couldn't rebase $parentname"
	    ok "Merging $parentname into $currentbranch"
	    git merge "$parentname" || failure " Couldn't merge $parentname"
	) && ok "Rebase and merge done"
}

function git_br_mergeto(){
    parentname="$1"
    currentbranch="$(git_current_branch)"
    (
	git_br_mergeback "$parentname" &&
	git checkout "$parentname" || failure "Couldn't rebase $parentname"
	git merge "$currentbranch" || failure "Couldn't merge $currentbranch"
    )
    git checkout "$currentbranch"
}
function git_br_del(){
    branchname="$1"
    remote="${2-unremote}"
    if [[ "$remote" == "remote" ]]; then
  command git checkout master
	ok "Deleting local and remote branch $branchname"
	command git branch -d "$branchname" && command git branch -r -d "origin/$branchname"
    else
	ok "Deleting local branch $branchname"
	command git branch -d "$branchname"
   fi
}

function git_br(){
    cmd="$1"
    shift
    case "$cmd" in
	add)
	    git_br_add "$@"
	;;
	del)
	    git_br_del "$@"
	    ;;
	remote)
	    git_br_remote "$@"
	    ;;
	sync)
	    git_br_sync "$@"
	    ;;
  mergedel)
      git_br_mergedel "$@"
      ;;
  mergeto)
      git_br_mergeto "$@"
      ;;
  mergeback)
      git_br_mergeback "$@"
      ;;
	help)
	    _git_error_msg "git_br" "Usage:"
	    ;;
	*)
	    _git_error_msg "git_br" "No such br command '$@'"
	    ;;
    esac
}

function git_signed_tag(){
    tagname="$1"
    shift
    ok "Tag current branch with signed tag $tagname"
    (
	command git tag  "$tagname" -s -a "$@" || failure "Couldn't create signed tag $tagname"
	command git push --tags
    )
}

function git_signed_commit(){
    ok "Signing commit"
    command git commit -S "$@"
}

function git_signed(){
    cmd="$1"
    shift
    case "$cmd" in
	tag)
	    git_signed_tag "$@"
	    ;;
	commit)
	    git_signed_commit "$@"
	    ;;
	help)
	    _git_error_msg "git_signed" "Usage:"
	    ;;
	*)
	    _git_error_msg "git_signed" "No such command '$@'"
	    ;;
	esac
}

function git_rmerge(){
        command git merge -s recursive -Xdiff-algorithm=patience -X "$@"
}

function git_tree(){
        git log --graph --pretty=email --all
}

function git(){
    cmd="$1"
    if [[ "git_$cmd" == ${cmd_list[(r)git_$cmd]} ]]; then
	shift
	"git_$cmd" "$@"
    else
	command git "$@"
    fi
}


function git_extras(){
        true
}
